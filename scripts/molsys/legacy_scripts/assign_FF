#! /usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun 25 13:48:20 2017

@author: rochus, kim

        assign_FF
        
        reads mfpx file and assigns params from MOF+, writing the corresponding
        ric/par file with the same rootname as the mfpx file
        The second parameter is the name of the force field

        Rewrite, using argparse.
"""

import argparse

import molsys

arg_desc = '''\
        ------------------------------------------------
            CL-Interface for assign_FF.
            Creates .par and .ric for a given .mfpx file and FF.

            To assign parameters: \t assign_FF <path to mfpx> <FF name> <ref system (optional)> -o <output file>
        '''
parser = argparse.ArgumentParser(formatter_class = argparse.RawDescriptionHelpFormatter,
                                    description= arg_desc)
parser.add_argument("fname", metavar="mfpx file", help="Path to mfpx file")
parser.add_argument("FF", metavar="FF name", help="Name of the FF in the DB")
parser.add_argument("ref", nargs="?", help="Name of reference system needed if no params are in DB")
parser.add_argument("--yml", action="store_true", help="use flag to write out in yaml format.")
args = vars(parser.parse_args())

print(args)
fname = args["fname"]
froot = fname.split('.',1)[0]

ff = args["FF"]

if args["ref"]:
    refsys = args["ref"]
else:
    refsys = None

if args["yml"]:
    yml = True
else:
    yml = False

m = molsys.mol()
m.read(fname)
m.addon("ff")
m.ff.assign_params(ff, refsysname=refsys, verbose=1)
m.ff.write(froot, yaml=yml)