#!/bin/bash
###QUICKTRY: moldenx structure.mfpx

###########################################################
#
#   molden mfpx structures v0.9
#   visualize MOF+ structure files via molden
#
#   by Roberto Amabile (2016)
#   basic assumption: mfpx file is a txyz file but
#     the 6th and 7th columns and
#       the comments (lines CONTAINING sharps)
#   TBI: "splitting" inline comments away
#
#   PRE-ALPHA VERSION: USE AT YOUR OWN RISK
#       NO WARRANTY, NO LIABILITY
#   The author will use best judgement and
#       reasonable effort to keep the code
#       clear and tidy
#   NOT YET LICENSED
#
###########################################################

VERSION=1.41

### USE
###     moldenx structure.mfpx
### it works as tinker xyz file
###
### with any different extension:
###     moldenx structure.xyz
### it works as usual

### HINT by RA
### you only need to append an "x" to your molden alias
### to automatically handle mfpx files.
### E.g.:
###     alias molden='molden -l -S -geom 1080x1080 -s5.0'
### becomes:
###     alias molden='moldenx -l -S -geom 1080x1080 -s 5.0'
### KNOWN ISSUE: cannot handle "glued" option+argument
### e.g. "-s5.0" must be changed in "-s 5.0"
### TBI: allowing spaces in positional parameters

COMMAND=$(which molden)
DEBUG="False" ### "True" for debugging info

### AUXILIARY FUNCTIONS ###################################
_logecho () {
    ###echo to stderr, for debugging
    if [ $DEBUG == "True" ]; then echo "$1" 1>&2 ; fi
}

### TEMPORARY-CARING FUNCTIONS ############################
_tmpfold () {
    if [ -z $TEMP_FOLD ]; then
        if [ -d "$1" ]; then
            if [ -x "$1" ]; then
                TEMP_FOLD=$1
                PRE_TEMP="True"
            fi
        else
            # create if temporary folder does not exist
            mkdir "$1"
            if [ -x "$1" ]; then
                TEMP_FOLD="$1"
                PRE_TEMP="False"
            else
                rm -r "$1"
            fi
        fi
    fi
}

_tmpfile () {
    ###set temporary file if not previously set
    if [ -z $TEMP_FILE ]; then
        TEMP_FILE=$TEMP_FOLD/molden.pid$$.$RANDOM
    fi
}

_tmpcheck () {
    ###check if variable is set and print message
    ###N.B.: give VARIABLE NAME as argument (VAR), so NO DOLLAR ($VAR)
    if [ -z "$1" ]; then
        _logecho "$1 is unset"
    else
        if [ -z "$2" ]; then
            _logecho "$1 is set to ${!1}"
        elif [ "${!2}" == "True" ]; then
            _logecho "$1 is set to ${!1} and pre-existed"
        elif [ "${!2}" == "False" ]; then
            _logecho "$1 is set to ${!1} and did not pre-exist"
        else
            echo "*** ERROR: $2 must be \"True\" or \"False\", not: \"${!2}\" " 1>&2
            exit 1
        fi
    fi
}

_tmpclean () {
    ###exit housekeeping
    echo -ne '\033[0K\r' ###gracious prompt sweeping
    ###remove temporary file
    if [ -e "$TEMP_FILE" ]; then
        _logecho "Removing temporary file $TEMP_FILE"
        rm $TEMP_FILE
    fi

    ###remove temporary folder if not pre-existing
    if [ -d "$TEMP_FOLD" ]; then
        if [ $PRE_TEMP == "False" ]; then
            _logecho "Removing temporary folder $TEMP_FOLD"
            rm -r $TEMP_FOLD
        fi
    fi
}
###clean-up in any exit case but SIGKILL (e.g. 'kill -9 $pid')
trap _tmpclean SIGHUP SIGINT SIGTERM

###TEMPORARY SETS AND CHECKS
_tmpfold /tmp
###if /tmp is not accessible
_tmpfold ~/.tmp
###if ~/.tmp is either unavailable or unaccessible
_tmpfold $PWD/.tmp
###you are safe if EVEN .tmp is not available!
_tmpcheck TEMP_FOLD PRE_TEMP
_tmpfile
_tmpcheck TEMP_FILE


### SHELL-ARGUMENTS HANDLING #############################
### TBI: allowing spaces in positional parameters
### It does NOT support glued option + argument, e.g. "-s5.0"
###     put a space in the between write e.g. "-s 5.0" instead
### It DOES support arbitrary position of options! (GNU-compliant)

OPTMODE="GIVEN"
#OPTMODE="TAKEN"

if [ $OPTMODE == "GIVEN" ] ###fast
then
    OPT1="+(-a|-b|-f|-g|-h|-hoff|-l|-m|-t|-u|-v|-z|-A|-C|-F|-H|-I|-L|-1|-2|-M|-O|-P|-Q|-S|-T|-U|-X|-W|-Z|-=)"
    OPT2="+(-c|-geom|-hdmin|-hdmax|-hamin|-hamax|-i|-j|-k|-o|-p|-r|-s|-w|-x|-y|-D|-G|-R|-V)"
fi

if [ $OPTMODE == "TAKEN" ] ###versatile
then
    declare -a OPT1="+("
    declare -a OPT2="+("
    while read OPTMOL
    do
        OPTWRD=$(echo "$OPTMOL" | wc -w)
        if [ $OPTWRD != 0 ]
        then
            if   [ $OPTWRD == 1 ]
            then
                OPT1+="$OPTMOL|"
            elif [ $OPTWRD == 2 ]
            then
                OPT2+="${OPTMOL% *}|"
            else
                echo "*** ERROR: OPTIONS WITH MORE THAN 2 ARGUMENTS!" 1>&2
                exit 1
            fi
        fi
    done <<< "$( $COMMAND -h | awk -F "  " '{print $1}' | grep ' -' )" ###command-specific!
    OPT1="${OPT1%|})" #trim last pipe, add brace
    OPT2="${OPT2%|})" #trim last pipe, add brace
fi

_logecho "Options w/o argument"
_logecho "    $OPT1"
_logecho "Options w/i argument"
_logecho "    $OPT2"
_logecho

shopt -s extglob ###needed even if $(shopt extglob) gives "extglob on"
iPOS=0
REAL_FILE=
for POS in "$@"
do
    _logecho "control number = $iPOS; positional argument = $POS"
    case $POS in
        $OPT1)
            _logecho "* FOUND option w/o argument: $POS"
            if [ $iPOS == 0 ]
            then
                (( iPOS += 0 ))
            else
                echo "*** ERROR: expected 0 as control number, found: $iPOS" 1>&2
                exit 1
            fi
        ;;
        $OPT2)
            _logecho "* FOUND option w/i argument: $POS"
            if [ $iPOS == 0 ]
            then
                (( iPOS += 1 ))
            else
                echo "*** ERROR: expected 0 as control number, found: $iPOS" 1>&2
                exit 1
            fi
        ;;
        *)
            if [ ! -z $REAL_FILE ] && [ $iPOS == 0 ]
            then
                echo "*** ERROR: filename set AND last argument needs an option" 1>&2
                echo "    filename is: $REAL_FILE" 1>&2
                echo "    last argument is: $POS" 1>&2
                echo "    control number is: $iPOS" 1>&2
                exit 1
            else
                if [ $iPOS == 1 ]
                then
                    _logecho "* FOUND argument for previous option: $POS"
                    (( iPOS += -1 ))
                elif [ -z $REAL_FILE ]
                then
                    _logecho "* FOUND filename: $POS"
                    REAL_FILE=$POS
                fi
            fi
        ;;
    esac
    _logecho
done


if [ $iPOS != 0 ] || [ -z $REAL_FILE ] 
then
    if [ $POS != "-h" ]
    then
        echo "*** ERROR: filename unset OR last option needs an argument" 1>&2
        echo "    filename is: $REAL_FILE" 1>&2
        echo "    last option is: $POS" 1>&2
        echo "    control number is: $iPOS" 1>&2
        exit 1
    else
        $COMMAND -h ; exit #command-specific!
    fi
fi

### MOLDEN SPECIFIC OPTIONS ###############################

if [ "${REAL_FILE: -5}" == ".mfpx" ]; then
    ### opens mfpx files
    ### if the extension is ".mfpx":
    ###     remove the comments, "erase" 6th and 7th columns
    ###     and redirect to temporary file
    ###     if everything is fine: molden the temporary file
    if $(grep "type" $REAL_FILE | grep -q "topo") ; then
        echo "topo file detected"
        grep -v \# $REAL_FILE | awk '{$6=0; for(i=1;i<=NF;i++) {gsub(/\/.*$/, "", $i)}; print}' > $TEMP_FILE && $COMMAND $TEMP_FILE ${@//$REAL_FILE/}
    else
        grep -v \# $REAL_FILE | awk '{$6="0"; $7=""; $8=""; print}' > $TEMP_FILE && $COMMAND $TEMP_FILE ${@//$REAL_FILE/}
    fi
elif [ "${REAL_FILE: -4}" == ".xyz" ] || [ "${REAL_FILE: -5}" == ".txyz" ] ; then
    ### opens xyz or txyz file, even with strings as atomtypes
    ### if the extension is ".xyz" or ".txyz":
    ###     remove the comments, fill 6th column with 0's
    ###     and redirect to temporary file
    ###     if everything is fine: molden the temporary file
    grep -v \# $REAL_FILE | awk '{$6=($6~/^[0-9]+$/?$6:0); print}' > $TEMP_FILE && $COMMAND $TEMP_FILE ${@//$REAL_FILE/}
else
    ### standard molden
    $COMMAND $@
fi

###CLEAN-UP OF TEMPORARY FILES AND FOLDERS###
_tmpclean
